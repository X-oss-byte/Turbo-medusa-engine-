/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Medusa Admin API
 * OpenAPI spec version: 1.0.0
 */
import type { PostCustomerGroupsGroupCustomersBatch200, PostCustomerGroupsGroupCustomersBatchBody, DeleteCustomerGroupsGroupCustomerBatch200, DeleteCustomerGroupsGroupCustomerBatchBody, PostCustomerGroups200, PostCustomerGroupsBody, GetCustomerGroups200, GetCustomerGroupsParams, DeleteCustomerGroupsCustomerGroup200, GetCustomerGroupsGroup200, PostCustomerGroupsGroup200, PostCustomerGroupsGroupBody } from ".././model";
/**
 * Adds a list of customers, represented by id's, to a customer group.
 * @summary Add a list of customers to a customer group
 */
export declare const postCustomerGroupsGroupCustomersBatch: (id: string, postCustomerGroupsGroupCustomersBatchBody: PostCustomerGroupsGroupCustomersBatchBody) => Promise<PostCustomerGroupsGroupCustomersBatch200>;
/**
 * Removes a list of customers, represented by id's, from a customer group.
 * @summary Remove a list of customers from a customer group
 */
export declare const deleteCustomerGroupsGroupCustomerBatch: (id: string, deleteCustomerGroupsGroupCustomerBatchBody: DeleteCustomerGroupsGroupCustomerBatchBody) => Promise<DeleteCustomerGroupsGroupCustomerBatch200>;
/**
 * Creates a CustomerGroup.
 * @summary Create a CustomerGroup
 */
export declare const postCustomerGroups: (postCustomerGroupsBody: PostCustomerGroupsBody) => Promise<PostCustomerGroups200>;
/**
 * Retrieve a list of customer groups.
 * @summary Retrieve a list of customer groups
 */
export declare const getCustomerGroups: (params?: GetCustomerGroupsParams | undefined) => Promise<GetCustomerGroups200>;
/**
 * Deletes a CustomerGroup.
 * @summary Delete a CustomerGroup
 */
export declare const deleteCustomerGroupsCustomerGroup: (id: string) => Promise<DeleteCustomerGroupsCustomerGroup200>;
/**
 * Retrieves a Customer Group.
 * @summary Retrieve a CustomerGroup
 */
export declare const getCustomerGroupsGroup: (id: string) => Promise<GetCustomerGroupsGroup200>;
/**
 * Update a CustomerGroup.
 * @summary Update a CustomerGroup
 */
export declare const postCustomerGroupsGroup: (id: string, postCustomerGroupsGroupBody: PostCustomerGroupsGroupBody) => Promise<PostCustomerGroupsGroup200>;
declare type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;
export declare type PostCustomerGroupsGroupCustomersBatchResult = NonNullable<AsyncReturnType<typeof postCustomerGroupsGroupCustomersBatch>>;
export declare type DeleteCustomerGroupsGroupCustomerBatchResult = NonNullable<AsyncReturnType<typeof deleteCustomerGroupsGroupCustomerBatch>>;
export declare type PostCustomerGroupsResult = NonNullable<AsyncReturnType<typeof postCustomerGroups>>;
export declare type GetCustomerGroupsResult = NonNullable<AsyncReturnType<typeof getCustomerGroups>>;
export declare type DeleteCustomerGroupsCustomerGroupResult = NonNullable<AsyncReturnType<typeof deleteCustomerGroupsCustomerGroup>>;
export declare type GetCustomerGroupsGroupResult = NonNullable<AsyncReturnType<typeof getCustomerGroupsGroup>>;
export declare type PostCustomerGroupsGroupResult = NonNullable<AsyncReturnType<typeof postCustomerGroupsGroup>>;
export {};
